# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.contrib.gis.db import models


class Agency(models.Model):
    agency_id = models.IntegerField(primary_key=True)
    description = models.CharField(max_length=34)
    statecode = models.CharField(max_length=4)

    class Meta:
        managed = False
        db_table = 'agency'


class Alarmlevel(models.Model):
    alarmlevel_id = models.IntegerField(primary_key=True)
    description = models.IntegerField()
    id_911 = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'alarmlevel'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Ceblocks(models.Model):
    gid = models.AutoField(primary_key=True)
    statefp = models.CharField(max_length=2, blank=True, null=True)
    countyfp = models.CharField(max_length=3, blank=True, null=True)
    tractce = models.CharField(max_length=6, blank=True, null=True)
    blkgrpce = models.CharField(max_length=1, blank=True, null=True)
    geoid = models.CharField(max_length=12, blank=True, null=True)
    namelsad = models.CharField(max_length=13, blank=True, null=True)
    mtfcc = models.CharField(max_length=5, blank=True, null=True)
    funcstat = models.CharField(max_length=1, blank=True, null=True)
    aland = models.FloatField(blank=True, null=True)
    awater = models.FloatField(blank=True, null=True)
    intptlat = models.CharField(max_length=11, blank=True, null=True)
    intptlon = models.CharField(max_length=12, blank=True, null=True)
    geom = models.MultiPolygonField(srid=4269, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ceblocks'


class CensusHouseholdIncome(models.Model):
    id = models.CharField(max_length=21)
    id2 = models.CharField(max_length=12)
    geography = models.CharField(max_length=60)
    estimate_total = models.IntegerField()
    total_less_than_10000 = models.IntegerField()
    total_10000_to_14999 = models.IntegerField()
    total_15000_to_19999 = models.IntegerField()
    total_20000_to_24999 = models.IntegerField()
    total_25000_to_29999 = models.IntegerField()
    total_30000_to_34999 = models.IntegerField()
    total_35000_to_39999 = models.IntegerField()
    total_40000_to_44999 = models.IntegerField()
    total_45000_to_49999 = models.IntegerField()
    total_50000_to_59999 = models.IntegerField()
    total_60000_to_74999 = models.IntegerField()
    total_75000_to_99999 = models.IntegerField()
    total_100000_to_124999 = models.IntegerField()
    total_125000_to_149999 = models.IntegerField()
    total_150000_to_199999 = models.IntegerField()
    total_200000_or_more = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'census_household_income'


class CensusHouseholdLanguage(models.Model):
    id = models.CharField(max_length=21)
    id2 = models.CharField(max_length=12)
    geography = models.CharField(max_length=60)
    estimate_total = models.IntegerField()
    english_only = models.IntegerField()
    spanish_total = models.IntegerField()
    spanish_lesh = models.IntegerField()
    spanish_notlesh = models.IntegerField()
    other_indo_euro_total = models.IntegerField()
    other_indo_euro_lesh = models.IntegerField()
    other_indo_euro_notlesh = models.IntegerField()
    asian_pacific_island_total = models.IntegerField()
    asian_pacific_island_lesh = models.IntegerField()
    asian_pacific_island_notlesh = models.IntegerField()
    other_total = models.IntegerField()
    other_lesh = models.IntegerField()
    other_notlesh = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'census_household_language'


class CensusHouseholds65Plus(models.Model):
    id = models.CharField(max_length=21)
    id2 = models.CharField(max_length=12)
    geography = models.CharField(max_length=60)
    totals = models.IntegerField()
    oneplus_people_65plus = models.IntegerField()
    one_or_more_people_65plus_1_person = models.IntegerField()
    oneplus_people_65plus_2plus_person = models.IntegerField()
    oneplus_people_65plus_2plus_person_family = models.IntegerField()
    oneplus_people_65plus_2plus_person_nonfamily = models.IntegerField()
    no_people_65plus = models.IntegerField()
    no_people_65plus_1_person = models.IntegerField()
    no_people_65plus_2plus_person = models.IntegerField()
    no_people_65plus_2plus_person_family = models.IntegerField()
    no_people_65plus_2plus_person_nonfamily = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'census_households_65plus'


class CensusHousingTenure(models.Model):
    id = models.CharField(max_length=21)
    id2 = models.CharField(max_length=12)
    geography = models.CharField(max_length=60)
    estimate_total_households = models.IntegerField()
    estimate_total_owner_occupied = models.IntegerField()
    estimate_total_renter_occupied = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'census_housing_tenure'


class CensusMedianHouseholdIncome(models.Model):
    id = models.CharField(max_length=21)
    id2 = models.CharField(max_length=12)
    geography = models.CharField(max_length=60)
    estimate_median_household_income = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'census_median_household_income'


class CensusRace(models.Model):
